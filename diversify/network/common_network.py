# -*- coding: utf-8 -*-
"""common_network

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wtQ8E2xd3RsuwCva9pecUbrXIha84PV_
"""

# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.


import torch.nn as nn
import torch.nn.utils.weight_norm as weightNorm


class feat_bottleneck(nn.Module):
    def __init__(self, feature_dim, bottleneck_dim=256, type="ori"):
        super(feat_bottleneck, self).__init__()
        self.type = type
        self.bottleneck = nn.Linear(feature_dim, bottleneck_dim)
        if type == "bn":
            self.norm = nn.BatchNorm1d(bottleneck_dim, affine=True)
        elif type == "ln":
            self.norm = nn.LayerNorm(bottleneck_dim)
        else:
            self.norm = None

    def forward(self, x):
        x = self.bottleneck(x)
        if self.norm is not None:
            x = self.norm(x)
        return x

class feat_classifier(nn.Module):
    def __init__(self, class_num, bottleneck_dim=256, type="linear"):
        super(feat_classifier, self).__init__()
        self.type = type
        if type == 'wn':
            self.fc = weightNorm(
                nn.Linear(bottleneck_dim, class_num), name="weight")
        else:
            self.fc = nn.Linear(bottleneck_dim, class_num)

    def forward(self, x):
        x = self.fc(x)
        return x
